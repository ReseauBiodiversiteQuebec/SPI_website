---
title: "Visualisation"
---

```{r RANGES_init, include = F}
# packages & data
library(knitr)
source("scr/data_n_figures_visual.r")

# colors
col_pal <- c("#440154FF", "#39568CFF", "#1F968BFF", "#73D055FF")
```

## **Augmentation de la protection de toutes les espèces ciblées au cours des 61 dernières années**  
Augmentation minimale de `r round(min(SPI_trend_range$trend)*100, digit = 0)`% pour `r SPI_trend_range$vernacular[SPI_trend_range$trend == min(SPI_trend_range$trend)]` (*`r SPI_trend_range$species[SPI_trend_range$trend == min(SPI_trend_range$trend)]`*)  
Augmentation maximale de `r round(max(SPI_trend_range$trend)*100, digit = 0)`% pour `r SPI_trend_range$vernacular[SPI_trend_range$trend == max(SPI_trend_range$trend)]` (*`r SPI_trend_range$species[SPI_trend_range$trend == max(SPI_trend_range$trend)]`*)  
Avec une moyenne de `r round(mean(SPI_trend_range$trend, na.rm = T)*100, digit = 0)`% (sd = `r round(sd(SPI_trend_range$trend)*100, digit = 0)` %) pour les `r nrow(SPI_trend_range)` espèces considérées  


```{r RANGES_SPI_species, echo=F, warnings=F}
#| label: fig-spi_distri
#| fig-cap: "Valeur moyenne et par espèce de l'indice de protection des espèces à partir des aires de distribution des espèces (n = 225). La courbe bleue représente le SPI moyen, les courbes verte et pourpre représentent les espèces la moins et la plus protégée, respectivement."
#| warning: false

g <- plot_ly(
  type = "scatter",
  x = sspi_df$YEAR[sspi_df$GROUPE == "mean"],
  y = sspi_df$SPI[sspi_df$GROUPE == "mean"],
  text = sspi_df$POPINFOS[sspi_df$GROUPE == "mean"],
  hoverinfo = "text",
  mode = "lines")

g <- plot_ly(
  type = "scatter",
  x = sspi_df$YEAR[sspi_df$GROUPE == "mean"],
  y = sspi_df$SPI[sspi_df$GROUPE == "mean"],
  text = sspi_df$POPINFOS[sspi_df$GROUPE == "mean"],
  hoverinfo = "text",
  mode = "lines")
  
for (i in unique(sspi_df$SPECIES[sspi_df$GROUPE == "other"])) {
  g <- add_lines(g, 
                 x = sspi_df$YEAR[sspi_df$SPECIES == i],
                 y = sspi_df$SPI[sspi_df$SPECIES == i],
                 text = sspi_df$POPINFOS[sspi_df$SPECIES == i],
                 color = I(rgb(190, 190, 190, alpha = 100, maxColorValue = 255)))
}
g <- add_lines(g, 
          x = sspi_df$YEAR[sspi_df$GROUPE == "max"],
          y = sspi_df$SPI[sspi_df$GROUPE == "max"],
          text = sspi_df$POPINFOS[sspi_df$GROUPE == "max"],
          color = I("#404788FF"))
g <- add_lines(g, 
          x = sspi_df$YEAR[sspi_df$GROUPE == "min"],
          y = sspi_df$SPI[sspi_df$GROUPE == "min"],
          text = sspi_df$POPINFOS[sspi_df$GROUPE == "min"],
          color = I("#B8DE29FF"))
g <- add_lines(g, 
          x = sspi_df$YEAR[sspi_df$GROUPE == "mean"],
          y = sspi_df$SPI[sspi_df$GROUPE == "mean"],
          text = sspi_df$POPINFOS[sspi_df$GROUPE == "mean"],
          color = I("#238A8DFF"))
g |> layout(
    showlegend = F,
    yaxis = list(zeroline = FALSE, title = "SPI"),
    xaxis = list(zeroline = FALSE, title = "Année")
)
g <- g %>% toWebGL()
print(g)
```

## **Valeurs des indices de protection des espèces en 2023**
```{r RANGES_SPI_2023, echo=F, warning = FALSE}
#| label: fig-spi_occ_2023
#| fig-cap: "Valeur de l'indice de protection des espèces en 2023, à partir des données d'aires de répartition (n = 225)."
#| warning: false

# conversion from species characters to ordered levels of factor for keeping increasing SPI
sspi_df_last$vernacular_fr2 <- factor(sspi_df_last$vernacular_fr, levels = sspi_df_last$vernacular_fr[order(sspi_df_last$SPI, decreasing = FALSE)])

fig <- plot_ly() |>
    add_trace(
        data = sspi_df_last,
        x = ~SPI,
        y = ~vernacular_fr2,
        name = "", # remove the "trace 0 " in the popup
        type = "bar",
        orientation = "h",
        color = I(col_pal[4]),
        marker = list(
            line = list(color = "white",
                        width = 0.2)),
        hovertemplate = paste(
            "<b>%{y}</b><br>",
            "<b>SPI</b> = %{x}"
        )
    ) |>
    layout(
        yaxis = list(zeroline = FALSE, title = "Espèce", showticklabels = FALSE),
        xaxis = list(zeroline = FALSE, title = "Indice de protection des espèces"),
        shapes = list(vline(0.17, color = "black"))
    )

fig <- fig %>% toWebGL()
fig
```

## **Etat de la protection de la portion nordique vs. du Sud des aires de distribution en 2023**  
  
Les espèces dont l'aire de distribution se trouve exclusivement au Nord (n = `r dim(last_spi_N)[1]`) présentent un SPI moyen de `r round(mean(last_spi_N$SPI_NORTH)*100, digit = 2)`­­% (sd = `r round(sd(last_spi_N$SPI_NORTH)*100, digit = 2)`­%).  
Les espèces dont l'aire de distribution se trouve exclusivement au Sud (n = `r dim(last_spi_S)[1]`) présentent un SPI moyen `r round(mean(last_spi_S$SPI_SOUTH)*100, digit = 2)`­% (sd = `r round(sd(last_spi_S$SPI_SOUTH)*100, digit = 2)`%).  

:::{.panel-tabset}

## Nord
```{r RANGES_SPI_2023_N, echo=F, warning = FALSE}
#| label: fig-spi_2023_Nord
#| fig-cap: "Valeur de l'indice de protection des espèces en 2023, à partir des données d'aires de distribution (n = 225) pour les espèces dont l'aire de distribution se trouve exclusivement dans le Nord."
#| warning: false
#| 
# conversion from species characters to ordered levels of factor for keeping increasing SPI
last_spi_N$vernacular_fr2 <- factor(last_spi_N$vernacular_fr, levels = last_spi_N$vernacular_fr[order(last_spi_N$SPI, decreasing = FALSE)])


fig <- plot_ly() |>
    add_bars(
        data = last_spi_N,
        x = ~SPI_NORTH,
        y = ~vernacular_fr2,
        type = "bar",
        orientation = "h",
        color = ~group_fr,
        colors = col_pal[2],
        hovertemplate = paste(
            "<b>%{y}</b><br>",
            "<b>SPI</b> = %{x}"
        )
    ) |>
    layout(
        showlegend = F,
        yaxis = list(zeroline = FALSE, title = "Espèce", showticklabels = FALSE),
        xaxis = list(zeroline = FALSE, title = "Indice de protection des espèces"),
        shapes = list(vline(0.17, color = "black"))
    )

fig <- fig %>% toWebGL()
fig
```
## Sud

```{r RANGES_SPI_2023_S, echo=F, warning = FALSE}
#| label: fig-spi_2023_Sud
#| fig-cap: "Valeur de l'indice de protection des espèces en 2023, à partir des données d'aires de distribution (n = 225) pour les espèces dont l'aire de distribution se situe exclusivement dans le Sud."
#| warning: false
#| 
# conversion from species characters to ordered levels of factor for keeping increasing SPI
last_spi_S$vernacular_fr2 <- factor(last_spi_S$vernacular_fr, levels = last_spi_S$vernacular_fr[order(last_spi_S$SPI, decreasing = FALSE)])


fig <- plot_ly() |>
    add_bars(
        data = last_spi_S,
        x = ~SPI_SOUTH,
        y = ~vernacular_fr2,
        type = "bar",
        orientation = "h",
        color = ~group_fr,
        colors = col_pal[3],
        hovertemplate = paste(
            "<b>%{y}</b><br>",
            "<b>SPI</b> = %{x}"
        )
    ) |>
    layout(
        showlegend = F,
        yaxis = list(zeroline = FALSE, title = "Espèce", showticklabels = FALSE),
        xaxis = list(zeroline = FALSE, title = "Indice de protection des espèces"),
        shapes = list(vline(0.17, color = "black"))
    )

fig <- fig %>% toWebGL()
fig
```
## Nord-Sud
```{r RANGES_SPI_2023_NS, echo=F, warning = FALSE}
#| label: fig-spi_2023_NordSud
#| fig-cap: "Valeur de l'indice de protection des espèces en 2023, à partir des données d'aires de distribution (n = 225) pour les espèces dont l'aire de distribution chevauche la limite Nord-Sud."
#| warning: false

# conversion from species characters to ordered levels of factor for keeping increasing SPI
nord <- last_spi_NS[last_spi_NS$LOC == "Nord",]
nord$vernacular_fr2 <- factor(nord$vernacular_fr, levels = nord$vernacular_fr[order(nord$SPI, decreasing = FALSE)])

sud <- last_spi_NS[last_spi_NS$LOC == "Sud",]
sud$vernacular_fr2 <- factor(sud$vernacular_fr, levels = sud$vernacular_fr[order(sud$SPI, decreasing = FALSE)])

fig_N <- plot_ly() |>
    add_bars(
        data = nord,
        x = ~SPI,
        y = ~vernacular_fr2,
        type = "bar",
        orientation = "h",
        color = ~LOC,
        colors = col_pal[2],
        hovertemplate = paste(
            "<b>%{y}</b><br>",
            "<b>SPI</b> = %{x}"
        )
    )   %>% 
  layout(
        yaxis = list(zeroline = FALSE, title = "Espèce", showticklabels = FALSE),
        xaxis = list(zeroline = FALSE, title = "Indice de protection des espèces"),
        shapes = list(vline(0.17, color = "black"))
    ) 
fig_S <- plot_ly() |>
    add_bars(
        data = sud,
        x = ~SPI,
        y = ~vernacular_fr2,
        type = "bar",
        orientation = "h",
        color = ~LOC,
        colors = col_pal[3],
        hovertemplate = paste(
            "<b>%{y}</b><br>",
            "<b>SPI</b> = %{x}"
        )
    )    %>% 
  layout(
        yaxis = list(zeroline = FALSE, title = "Espèce", showticklabels = FALSE),
        xaxis = list(zeroline = FALSE),
        shapes = list(vline(0.17, color = "black"))
    ) 

fig <- subplot(fig_N, fig_S) 
  
  fig <- fig %>% toWebGL()
fig
```
:::
## **Etat de la protection des espèces par groupe taxonomique en 2023**  

``` {r taxo_description, echo = FALSE, results = 'asis'}

template <- "Les %s présentent un SPI moyen de %s (sd = %s, n = %s).  
"

for (i in seq(nrow(spi_taxo))) {
  current <- spi_taxo[i, ]
  cat(sprintf(template,
                current$group_fr,
                round(current$mean, digit = 2),
                round(current$sd, digit = 2),
                current$n))
}
```

```{r RANGES_SPI_2023_taxo, echo=F, warning = FALSE}
#| label: fig-spi_2023_groupe_taxo
#| fig-cap: "Valeur de l'indice de protection des espèces en 2023, à partir des données d'aires de distribution (n = 225), organisé par groupe taxonomique."
#| warning: false

# conversion from vernacular_fr characters to ordered levels of factor for keeping increasing SPI
last_spi$vernacular_fr2 <- factor(last_spi$vernacular_fr, levels = last_spi$vernacular_fr[order(last_spi$SPI, decreasing = FALSE)])


fig <- plot_ly() |>
    add_bars(
        data = last_spi,
        x = ~SPI,
        y = ~vernacular_fr2,
        type = "bar",
        orientation = "h",
        color = ~group_fr,
        colors = col_pal,
        hovertemplate = paste(
            "<b>%{y}</b><br>",
            "<b>SPI</b> = %{x}"
        )
    ) |>
    layout(
        yaxis = list(zeroline = FALSE, title = "Espèce", showticklabels = FALSE),
        xaxis = list(zeroline = FALSE, title = "Indice de protection des espèces"),
        shapes = list(vline(0.17, color = "black"))
    )

fig <- fig %>% toWebGL()
fig
```
